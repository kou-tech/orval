/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * User API
 * API for managing users
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr'
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  Order
} from '../model'



  
  /**
 * @summary Get list of orders
 */
export type getOrdersResponse = {
  data: Order[];
  status: number;
}

export const getGetOrdersUrl = () => {


  return `/orders`
}

export const getOrders = async ( options?: RequestInit): Promise<getOrdersResponse> => {
  
  const res = await fetch(getGetOrdersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getGetOrdersKey = () => [`/orders`] as const;

export type GetOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getOrders>>>
export type GetOrdersQueryError = Promise<unknown>

/**
 * @summary Get list of orders
 */
export const useGetOrders = <TError = Promise<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getOrders>>, TError> & { swrKey?: Key, enabled?: boolean }, fetch?: RequestInit }
) => {
  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetOrdersKey() : null);
  const swrFn = () => getOrders(fetchOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Create a new order
 */
export type postOrdersResponse = {
  data: Order;
  status: number;
}

export const getPostOrdersUrl = () => {


  return `/orders`
}

export const postOrders = async (order: Order, options?: RequestInit): Promise<postOrdersResponse> => {
  
  const res = await fetch(getPostOrdersUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      order,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getPostOrdersMutationFetcher = ( options?: RequestInit) => {
  return (_: Key, { arg }: { arg: Order }): Promise<postOrdersResponse> => {
    return postOrders(arg, options);
  }
}
export const getPostOrdersMutationKey = () => [`/orders`] as const;

export type PostOrdersMutationResult = NonNullable<Awaited<ReturnType<typeof postOrders>>>
export type PostOrdersMutationError = Promise<unknown>

/**
 * @summary Create a new order
 */
export const usePostOrders = <TError = Promise<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postOrders>>, TError, Key, Order, Awaited<ReturnType<typeof postOrders>>> & { swrKey?: string }, fetch?: RequestInit}
) => {

  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostOrdersMutationKey();
  const swrFn = getPostOrdersMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Get an order by ID
 */
export type getOrdersIdResponse = {
  data: Order;
  status: number;
}

export const getGetOrdersIdUrl = (id: string,) => {


  return `/orders/${id}`
}

export const getOrdersId = async (id: string, options?: RequestInit): Promise<getOrdersIdResponse> => {
  
  const res = await fetch(getGetOrdersIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getGetOrdersIdKey = (id: string,) => [`/orders/${id}`] as const;

export type GetOrdersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrdersId>>>
export type GetOrdersIdQueryError = Promise<void>

/**
 * @summary Get an order by ID
 */
export const useGetOrdersId = <TError = Promise<void>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getOrdersId>>, TError> & { swrKey?: Key, enabled?: boolean }, fetch?: RequestInit }
) => {
  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetOrdersIdKey(id) : null);
  const swrFn = () => getOrdersId(id, fetchOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Update an order by ID
 */
export type putOrdersIdResponse = {
  data: Order;
  status: number;
}

export const getPutOrdersIdUrl = (id: string,) => {


  return `/orders/${id}`
}

export const putOrdersId = async (id: string,
    order: Order, options?: RequestInit): Promise<putOrdersIdResponse> => {
  
  const res = await fetch(getPutOrdersIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      order,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getPutOrdersIdMutationFetcher = (id: string, options?: RequestInit) => {
  return (_: Key, { arg }: { arg: Order }): Promise<putOrdersIdResponse> => {
    return putOrdersId(id, arg, options);
  }
}
export const getPutOrdersIdMutationKey = (id: string,) => [`/orders/${id}`] as const;

export type PutOrdersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putOrdersId>>>
export type PutOrdersIdMutationError = Promise<void>

/**
 * @summary Update an order by ID
 */
export const usePutOrdersId = <TError = Promise<void>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putOrdersId>>, TError, Key, Order, Awaited<ReturnType<typeof putOrdersId>>> & { swrKey?: string }, fetch?: RequestInit}
) => {

  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutOrdersIdMutationKey(id);
  const swrFn = getPutOrdersIdMutationFetcher(id, fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Delete an order by ID
 */
export type deleteOrdersIdResponse = {
  data: void;
  status: number;
}

export const getDeleteOrdersIdUrl = (id: string,) => {


  return `/orders/${id}`
}

export const deleteOrdersId = async (id: string, options?: RequestInit): Promise<deleteOrdersIdResponse> => {
  
  const res = await fetch(getDeleteOrdersIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getDeleteOrdersIdMutationFetcher = (id: string, options?: RequestInit) => {
  return (_: Key, __: { arg: Arguments }): Promise<deleteOrdersIdResponse> => {
    return deleteOrdersId(id, options);
  }
}
export const getDeleteOrdersIdMutationKey = (id: string,) => [`/orders/${id}`] as const;

export type DeleteOrdersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrdersId>>>
export type DeleteOrdersIdMutationError = Promise<void>

/**
 * @summary Delete an order by ID
 */
export const useDeleteOrdersId = <TError = Promise<void>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteOrdersId>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteOrdersId>>> & { swrKey?: string }, fetch?: RequestInit}
) => {

  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteOrdersIdMutationKey(id);
  const swrFn = getDeleteOrdersIdMutationFetcher(id, fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


export const getGetOrdersResponseMock = (): Order[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.word.sample(), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({productId: faker.helpers.arrayElement([faker.word.sample(), undefined]), quantity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), total: faker.number.int({min: undefined, max: undefined}), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), userId: faker.word.sample()})))

export const getPostOrdersResponseMock = (overrideResponse: Partial< Order > = {}): Order => ({createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.word.sample(), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({productId: faker.helpers.arrayElement([faker.word.sample(), undefined]), quantity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), total: faker.number.int({min: undefined, max: undefined}), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), userId: faker.word.sample(), ...overrideResponse})

export const getGetOrdersIdResponseMock = (overrideResponse: Partial< Order > = {}): Order => ({createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.word.sample(), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({productId: faker.helpers.arrayElement([faker.word.sample(), undefined]), quantity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), total: faker.number.int({min: undefined, max: undefined}), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), userId: faker.word.sample(), ...overrideResponse})

export const getPutOrdersIdResponseMock = (overrideResponse: Partial< Order > = {}): Order => ({createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.word.sample(), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({productId: faker.helpers.arrayElement([faker.word.sample(), undefined]), quantity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), total: faker.number.int({min: undefined, max: undefined}), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), userId: faker.word.sample(), ...overrideResponse})


export const getGetOrdersMockHandler = (overrideResponse?: Order[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Order[]> | Order[])) => {
  return http.get('*/orders', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetOrdersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostOrdersMockHandler = (overrideResponse?: Order | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Order> | Order)) => {
  return http.post('*/orders', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostOrdersResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetOrdersIdMockHandler = (overrideResponse?: Order | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Order> | Order)) => {
  return http.get('*/orders/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetOrdersIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutOrdersIdMockHandler = (overrideResponse?: Order | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Order> | Order)) => {
  return http.put('*/orders/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPutOrdersIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteOrdersIdMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/orders/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getOrdersMock = () => [
  getGetOrdersMockHandler(),
  getPostOrdersMockHandler(),
  getGetOrdersIdMockHandler(),
  getPutOrdersIdMockHandler(),
  getDeleteOrdersIdMockHandler()
]
